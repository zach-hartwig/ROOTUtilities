// name: SignalHandler.cc
// date: 25 Jul 14
// auth: Zach Hartwig
// mail: hartwig@psfc.mit.edu
//
// desc: The SignalHandler class contains the "slot" methods that are
//       triggered by "signals" generated by widgets in the
//       InterfaceBuilder class. It provides a modular way to handle
//       widget actions.

#include <TApplication.h>
#include <TDirectory.h>
#include <TGButton.h>
#include <TCanvas.h>
#include <TH1F.h>

#include "SignalHandler.hh"
#include "InterfaceBuilder.hh"
#include "InterfaceEnumerators.hh"


SignalHandler::SignalHandler(InterfaceBuilder *TI)
  : TheInterface(TI)
{;}


SignalHandler::~SignalHandler()
{;}


// A method to handle text buttons actions
void SignalHandler::HandleTextButtons()
{
  // Obtain the text button object that was activated
  TGTextButton *ActiveTextButton = (TGTextButton *)gTQSender;

  // Get the active text button widget ID
  int ActiveButtonID  = ActiveTextButton->WidgetId();   

  // Trigger the appropriate action for the specified widget ID
  switch(ActiveButtonID){

  case Plot_TB_ID:{
    TH1F *H = new TH1F("H","H",20,-5,5);
    H->FillRandom("gaus",1000);
    H->SetFillColor(kAzure+7);
    H->Draw("B");
    TheInterface->TheCanvas_EC->GetCanvas()->Update();
    break;
  }

  case Exit_TB_ID:{
    HandleTerminate();
    break;
  }
    
  default:{
    break;
  }
  }
}


// A method to handle closing the program
void SignalHandler::HandleTerminate()
{
  gApplication->Terminate();
}
