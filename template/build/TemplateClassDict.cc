//
// File generated by rootcint at Thu Jul 17 16:17:29 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dIhomedIhartwigdIrootdIROOTUtilitiesdItemplatedIbuilddITemplateClassDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "TemplateClassDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TemplateClass_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TemplateClass(void *p = 0);
   static void *newArray_TemplateClass(Long_t size, void *p);
   static void delete_TemplateClass(void *p);
   static void deleteArray_TemplateClass(void *p);
   static void destruct_TemplateClass(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TemplateClass*)
   {
      ::TemplateClass *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TemplateClass >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TemplateClass", ::TemplateClass::Class_Version(), "/home/hartwig/root/ROOTUtilities/template/include/TemplateClass.hh", 19,
                  typeid(::TemplateClass), DefineBehavior(ptr, ptr),
                  &::TemplateClass::Dictionary, isa_proxy, 4,
                  sizeof(::TemplateClass) );
      instance.SetNew(&new_TemplateClass);
      instance.SetNewArray(&newArray_TemplateClass);
      instance.SetDelete(&delete_TemplateClass);
      instance.SetDeleteArray(&deleteArray_TemplateClass);
      instance.SetDestructor(&destruct_TemplateClass);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TemplateClass*)
   {
      return GenerateInitInstanceLocal((::TemplateClass*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TemplateClass*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TemplateClass::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TemplateClass::Class_Name()
{
   return "TemplateClass";
}

//______________________________________________________________________________
const char *TemplateClass::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TemplateClass*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TemplateClass::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TemplateClass*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TemplateClass::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TemplateClass*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TemplateClass::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TemplateClass*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TemplateClass::Streamer(TBuffer &R__b)
{
   // Stream an object of class TemplateClass.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TemplateClass::Class(),this);
   } else {
      R__b.WriteClassBuffer(TemplateClass::Class(),this);
   }
}

//______________________________________________________________________________
void TemplateClass::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TemplateClass.
      TClass *R__cl = ::TemplateClass::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TemplateClass(void *p) {
      return  p ? new(p) ::TemplateClass : new ::TemplateClass;
   }
   static void *newArray_TemplateClass(Long_t nElements, void *p) {
      return p ? new(p) ::TemplateClass[nElements] : new ::TemplateClass[nElements];
   }
   // Wrapper around operator delete
   static void delete_TemplateClass(void *p) {
      delete ((::TemplateClass*)p);
   }
   static void deleteArray_TemplateClass(void *p) {
      delete [] ((::TemplateClass*)p);
   }
   static void destruct_TemplateClass(void *p) {
      typedef ::TemplateClass current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TemplateClass

/********************************************************
* /home/hartwig/root/ROOTUtilities/template/build/TemplateClassDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableTemplateClassDict();

extern "C" void G__set_cpp_environmentTemplateClassDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("/home/hartwig/root/ROOTUtilities/template/include/TemplateClass.hh");
  G__cpp_reset_tagtableTemplateClassDict();
}
#include <new>
extern "C" int G__cpp_dllrevTemplateClassDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TemplateClass */
static int G__TemplateClassDict_168_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TemplateClass* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TemplateClass[n];
     } else {
       p = new((void*) gvp) TemplateClass[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TemplateClass;
     } else {
       p = new((void*) gvp) TemplateClass;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TemplateClassDictLN_TemplateClass));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TemplateClassDict_168_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TemplateClass::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TemplateClassDict_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TemplateClass::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TemplateClassDict_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TemplateClass::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TemplateClassDict_168_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TemplateClass::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TemplateClassDict_168_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TemplateClass*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TemplateClassDict_168_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TemplateClass::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TemplateClassDict_168_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TemplateClass::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TemplateClassDict_168_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TemplateClass::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TemplateClassDict_168_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TemplateClass::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TemplateClassDict_168_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TemplateClass* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TemplateClass(*(TemplateClass*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TemplateClassDictLN_TemplateClass));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TemplateClass G__TTemplateClass;
static int G__TemplateClassDict_168_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TemplateClass*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TemplateClass*) (soff+(sizeof(TemplateClass)*i)))->~G__TTemplateClass();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TemplateClass*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TemplateClass*) (soff))->~G__TTemplateClass();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TemplateClassDict_168_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TemplateClass* dest = (TemplateClass*) G__getstructoffset();
   *dest = *(TemplateClass*) libp->para[0].ref;
   const TemplateClass& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TemplateClass */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncTemplateClassDict {
 public:
  G__Sizep2memfuncTemplateClassDict(): p(&G__Sizep2memfuncTemplateClassDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncTemplateClassDict::*p)();
};

size_t G__get_sizep2memfuncTemplateClassDict()
{
  G__Sizep2memfuncTemplateClassDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceTemplateClassDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TemplateClassDictLN_TemplateClass))) {
     TemplateClass *G__Lderived;
     G__Lderived=(TemplateClass*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TemplateClassDictLN_TemplateClass),G__get_linked_tagnum(&G__TemplateClassDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableTemplateClassDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__TemplateClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TemplateClassDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TemplateClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TemplateClassDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TemplateClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__TemplateClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TemplateClassDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TemplateClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TemplateClassDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TemplateClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TemplateClass */
static void G__setup_memvarTemplateClass(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TemplateClassDictLN_TemplateClass));
   { TemplateClass *p; p=(TemplateClass*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TemplateClassDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarTemplateClassDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTemplateClass(void) {
   /* TemplateClass */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TemplateClassDictLN_TemplateClass));
   G__memfunc_setup("TemplateClass",1330,G__TemplateClassDict_168_0_1, 105, G__get_linked_tagnum(&G__TemplateClassDictLN_TemplateClass), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TemplateClassDict_168_0_2, 85, G__get_linked_tagnum(&G__TemplateClassDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TemplateClass::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TemplateClassDict_168_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TemplateClass::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TemplateClassDict_168_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TemplateClass::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TemplateClassDict_168_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TemplateClass::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TemplateClassDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TemplateClassDict_168_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TemplateClassDict_168_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TemplateClass::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TemplateClassDict_168_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TemplateClass::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TemplateClassDict_168_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TemplateClass::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TemplateClassDict_168_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TemplateClass::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TemplateClass", 1330, G__TemplateClassDict_168_0_14, (int) ('i'), G__get_linked_tagnum(&G__TemplateClassDictLN_TemplateClass), -1, 0, 1, 1, 1, 0, "u 'TemplateClass' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TemplateClass", 1456, G__TemplateClassDict_168_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TemplateClassDict_168_0_16, (int) ('u'), G__get_linked_tagnum(&G__TemplateClassDictLN_TemplateClass), -1, 1, 1, 1, 1, 0, "u 'TemplateClass' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncTemplateClassDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalTemplateClassDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcTemplateClassDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__TemplateClassDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__TemplateClassDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__TemplateClassDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__TemplateClassDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__TemplateClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__TemplateClassDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TemplateClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__TemplateClassDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TemplateClassDictLN_TemplateClass = { "TemplateClass" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableTemplateClassDict() {
  G__TemplateClassDictLN_TClass.tagnum = -1 ;
  G__TemplateClassDictLN_TBuffer.tagnum = -1 ;
  G__TemplateClassDictLN_TMemberInspector.tagnum = -1 ;
  G__TemplateClassDictLN_TObject.tagnum = -1 ;
  G__TemplateClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__TemplateClassDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TemplateClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__TemplateClassDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TemplateClassDictLN_TemplateClass.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableTemplateClassDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__TemplateClassDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__TemplateClassDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__TemplateClassDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__TemplateClassDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__TemplateClassDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__TemplateClassDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TemplateClassDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__TemplateClassDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TemplateClassDictLN_TemplateClass),sizeof(TemplateClass),-1,292096,(char*)NULL,G__setup_memvarTemplateClass,G__setup_memfuncTemplateClass);
}
extern "C" void G__cpp_setupTemplateClassDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupTemplateClassDict()");
  G__set_cpp_environmentTemplateClassDict();
  G__cpp_setup_tagtableTemplateClassDict();

  G__cpp_setup_inheritanceTemplateClassDict();

  G__cpp_setup_typetableTemplateClassDict();

  G__cpp_setup_memvarTemplateClassDict();

  G__cpp_setup_memfuncTemplateClassDict();
  G__cpp_setup_globalTemplateClassDict();
  G__cpp_setup_funcTemplateClassDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncTemplateClassDict();
  return;
}
class G__cpp_setup_initTemplateClassDict {
  public:
    G__cpp_setup_initTemplateClassDict() { G__add_setup_func("TemplateClassDict",(G__incsetup)(&G__cpp_setupTemplateClassDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initTemplateClassDict() { G__remove_setup_func("TemplateClassDict"); }
};
G__cpp_setup_initTemplateClassDict G__cpp_setup_initializerTemplateClassDict;

